import re

def check_password_strength(password):
    # Initialize variables
    strength_score = 0
    feedback = []
    suggestions = []

    # Minimum length of 8 characters
    if len(password) >= 8:
        strength_score += 1
    else:
        feedback.append("Password is too short. Use at least 8 characters.")
        suggestions.append("Try adding more characters to increase the length.")

    # Check for lowercase letters
    if re.search(r'[a-z]', password):
        strength_score += 1
    else:
        feedback.append("Missing lowercase letters.")
        suggestions.append("Include some lowercase letters (a-z).")

    # Check for uppercase letters
    if re.search(r'[A-Z]', password):
        strength_score += 1
    else:
        feedback.append("Missing uppercase letters.")
        suggestions.append("Include at least one uppercase letter (A-Z).")

    # Check for digits
    if re.search(r'[0-9]', password):
        strength_score += 1
    else:
        feedback.append("Missing digits.")
        suggestions.append("Add some numbers (0-9) for better security.")

    # Check for special characters
    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        strength_score += 1
    else:
        feedback.append("Missing special characters.")
        suggestions.append("Use special characters like !, @, #, etc. to make the password stronger.")

    # Check for repeated patterns (to detect weak passwords like 'aaa', '123')
    if re.search(r'(.)\1\1', password):
        feedback.append("Password contains repeated characters or patterns, making it weaker.")
        suggestions.append("Avoid repeated characters or predictable patterns.")

    # Evaluate overall strength
    if strength_score == 5:
        feedback.append("This is an **extremely strong** password!")
    elif 3 <= strength_score < 5:
        feedback.append("This is a **moderately strong** password.")
    else:
        feedback.append("This is a **weak** password and vulnerable to attacks.")

    return feedback, suggestions, strength_score

def analyze_password(password):
    print("\nAnalyzing password...\n")
    
    feedback, suggestions, strength_score = check_password_strength(password)

    # Provide feedback on password analysis
    print("Feedback on your password:")
    for line in feedback:
        print(f"- {line}")

    # Provide suggestions for improving the password
    if strength_score < 5:
        print("\nSuggestions to improve your password:")
        for suggestion in suggestions:
            print(f"- {suggestion}")

if __name__ == "__main__":
    # Input from user
    password = input("Enter a password to analyze: ")
    analyze_password(password)
